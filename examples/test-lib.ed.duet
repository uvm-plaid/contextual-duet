let f =
  sλ myLaplaceOne : (a : ℝ) ⊸⋆ [ a⋅⟨1.0,0.0⟩ ] ℝ ,
     myLaplace : ∀ εₛ : ℝ⁺ . (ε : ℝ⁺[εₛ]) ⊸ [ε⋅0.0] (b : ℝ) ⊸⋆ [ ε⋅⟨∞,∞⟩, b⋅⟨εₛ,0.0⟩ ] ℝ ,
     myGauss : ∀ Γ₁ : cxt, Γ₂ : cxt, εₛ : ℝ⁺, δₛ : ℝ⁺ . (ε : ℝ⁺[εₛ]) ⊸ [ε⋅0.0] (δ : ℝ⁺[δₛ]) ⊸ [ε⋅0.0, δ⋅0.0] (c : ℝ) ⊸⋆ [ ε⋅⟨∞,∞⟩, δ⋅⟨∞,∞⟩, Γ₁⋅⟨εₛ,δₛ⟩, Γ₂⋅⟨∞,∞⟩ ] ℝ ,
     -- gauss[ε,δ,s] <x, y> {x + y + z}
     -- gauss@[x,y]@[z]@ε@δ ε δ (sλ a:ℝ ⇒ x+y+z)
     myGauss : ∀ Γ₁ : cxt, Γ₂ : cxt, εₛ : ℝ⁺, δₛ : ℝ⁺ .
       (ε : ℝ⁺[εₛ]) ⊸ [ε⋅0.0]
       (δ : ℝ⁺[δₛ]) ⊸ [ε⋅0.0, δ⋅0.0]
       (f : (x : ℝ) ⊸ [Γ₁⋅1.0, Γ₂⋅∞, x⋅∞] ℝ) ⊸⋆ [ ε⋅⟨∞,∞⟩, δ⋅⟨∞,∞⟩, Γ₁⋅⟨εₛ,δₛ⟩, Γ₂⋅⟨∞,∞⟩ ]
       ℝ,
     
     -- I think this is the type of Bind
     -- mySequentialComposition : ∀ ε₁: ℝ, δ₁: ℝ, ε₂: ℝ, δ₂: ℝ . var : ((x₁ : ℝ) ⊸⋆ [ x₁⋅⟨ε₁,δ₁⟩ ] ℝ) ⊸ [] ((x₂ : ℝ) ⊸⋆ [ x₂⋅⟨ε₂,δ₂⟩ ] ℝ) ⊸ [] (x : ℝ) ⊸⋆ [ x⋅⟨ε₁+ε₂,δ₁+δ₂⟩ ] ℝ ,

     -- this is loop of a single variable (doesn't close over anything)
     -- myLoop : ∀ ε: ℝ, δ: ℝ, k: ℝ . ((x : ℝ) ⊸⋆ [ x⋅⟨ε,δ⟩ ] ℝ) ⊸ (x : ℝ) ⊸⋆ [ x⋅⟨kε,kδ⟩ ] ℝ,

     -- this is "better" type of loop - the function closes over some things. How do we write this type, with the quantified Γ? What goes in the [?]
     -- myLoop2 : ∀ ε: ℝ, δ: ℝ, k: ℝ, Γ: PEnv . ((x : ℝ) ⊸⋆ Γ⋅⟨ε,δ⟩+[x⋅∞] ℝ) ⊸ [?] (x : ℝ) ⊸⋆ Γ⋅⟨kε,kδ⟩+[x⋅∞] ℝ,

     -- how do we separate "stuff we care about" from "stuff we don't care about"? Will pλs need type annotations to specify this?
     -- myALoop : ∀ ε: ℝ, δ: ℝ, δ′: ℝ, k: ℝ, Γ₁: PEnv, Γ₂: PEnv, Γ₃: PEnv . ((x : ℝ) ⊸⋆ Γ₁⋅⟨ε,δ⟩+Γ₂⋅⟨∞,∞⟩ ℝ) ⊸ [?] (x : ℝ) ⊸ [?] (δ′ : ℝ⁺[δ′]) ⊸⋆ Γ₁⋅⟨2ε√(2k㏒(1/δ′),k⋅δ+δ′⟩+Γ₂⋅⟨∞,∞⟩+[ε⋅⟨∞,∞⟩ δ⋅⟨∞,∞⟩ δ′⋅⟨∞,∞⟩ k⋅⟨∞,∞⟩] ℝ,


       myALoop :
        ∀ ε: ℝ⁺, δ: ℝ⁺, δ′: ℝ⁺, k: ℕ,
          Γ₁: cxt, Γ₂: cxt
        .
        (f : (x : ℝ) ⊸⋆[ Γ₁⋅⟨ε,δ⟩ , Γ₂⋅⟨∞,∞⟩ ] ℝ)
        ⊸ [f⋅0.0]
        (x : ℝ)
        ⊸ [f⋅0.0, x⋅0.0]
        (δ′ : ℝ⁺[δ′])
        ⊸⋆ [ Γ₁⋅⟨2.0⋅ε⋅(√ (2.0⋅k⋅(㏒ (1.0/δ′)))),k⋅δ+δ′⟩
           , Γ₂⋅⟨∞,∞⟩
           , f⋅⟨∞,∞⟩
           , x⋅⟨∞,∞⟩
           , δ′⋅⟨∞,∞⟩
           ] ℝ

   ⇒
   pλ a : ℝ
   ⇒
   r₁ ← myLaplaceOne a;
   r₂ ← myLaplace @ ℝ⁺[1.0] ℝ⁺[1.0] a;
   -- r₃ ← myGauss @ ℝ⁺[1.0] @ ℝ⁺[1.0] ℝ⁺[1.0] ℝ⁺[1.0] a;
   return ⟨r₁, r₂⟩       -- should give a⋅⟨3.0, 0.001⟩ differential privacy
in f
