-- hyperparameter tuning
let mzeros = sλ m : ℕ,
                n : ℕ
                .
                nr : ℕ[m],
                nc : ℕ[n]
                ⇒
  mcreate[ L∞ | nr , nc ] { i , j ⇒ 0.0 }
in

let predictOne = sλ n : ℕ .
                    θ : 𝕄 [L∞, U|1, n⋅ℝ]
                    ⇒
                    sλ .
                       x : 𝕄 [L∞, U|1, n⋅𝔻]
                       ⇒
  let prediction = (mmap x { e ⇒ conv e }) × (tr θ) in
  sign (prediction#[idx ℕ[0], idx ℕ[0]])
in

let predict = sλ m : ℕ, n : ℕ .
                 xs : 𝕄 [L∞, U|m, n⋅𝔻],
                 θ : 𝕄 [L∞, U|1, n⋅ℝ]
                 ⇒
  let po = discf (predictOne@[n] θ) in
  mmap-row xs { row ⇒ po row }
in

let correct = sλ m : ℕ, n : ℕ .
                 xs : 𝕄 [L∞, U|m, n⋅𝔻],
                 ys : 𝕄 [L∞, U|m, 1⋅𝔻],
                 θ : 𝕄 [L∞, U|1, n⋅ℝ]
                 ⇒
  count (mmap ys, (predict@[m, n] xs θ) { y₁, y₂ ⇒ y₁ ≡ y₂ })
in

let noisy_sgd = pλ m  : ℕ,
                   n  : ℕ,
                   o  : ℕ,
                   k  : ℕ,
                   ε  : ℝ⁺,
                   δ  : ℝ⁺
                   .
                   xs : 𝕄 [L∞, U|m, n⋅𝔻 ] ,
                   ys : 𝕄 [L∞, U|m, 1⋅𝔻 ] ,
                   k  : ℕ[k],
                   ε  : ℝ⁺[ε],
                   δ  : ℝ⁺[δ],
                   η  : ℝ
                   ⇒
  let m₀ = mzeros@[1, n] ℕ[1] (cols xs) in
  let c = box (mclip[L2] xs) in
  aloop[ δ ] k on m₀ <xs,ys> { a, θ ⇒
    let s = ℝ⁺[1.0] / real (rows xs) in
    g ← mgauss[ s , ε , δ ] <xs,ys> { ∇[ LR | θ ; unbox c , ys ] } ;
    return matsub @ m @ n θ (mscale @ m @ n η g)
  }
in

let pick_η = pλ m  : ℕ,
                n  : ℕ,
                o  : ℕ,
                k  : ℕ,
                ε  : ℝ⁺,
                δ  : ℝ⁺
                .
                xs : 𝕄 [L∞, U|m, n⋅𝔻 ] ,
                ys : 𝕄 [L∞, U|m, 1⋅𝔻 ] ,
                k  : ℕ[k],
                ε  : ℝ⁺[ε],
                δ  : ℝ⁺[δ],
                ηs : 𝕄 [L∞, U|1, o⋅ℝ ]
                ⇒
  θs ← mmapp ηs { η ⇒ noisy_sgd@[m, n, o, k, ε, δ. xs, ys, k, ε, δ, η] };
  η ← exponential[ℝ⁺[1.0], ε] θs <xs, ys> { θ ⇒
    correct@[m, n] xs ys θ
  };
  return ηs#[idx ℕ[0], η]

in


let main = pλ m  : ℕ,
              n  : ℕ,
              o  : ℕ,
              k  : ℕ,
              ε  : ℝ⁺,
              δ  : ℝ⁺
              .
              xs : 𝕄 [L∞, U|m, n⋅𝔻 ] ,
              ys : 𝕄 [L∞, U|m, 1⋅𝔻 ] ,
              k  : ℕ[k],
              ε  : ℝ⁺[ε],
              δ  : ℝ⁺[δ],
              ηs : 𝕄 [L∞, U|1, o⋅ℝ ]
              ⇒
  η ← pick_η@[m, n, o, k, ε, δ. xs, ys, k, ε, δ, ηs];
  θ ← noisy_sgd@[m, n, o, k, ε, δ. xs, ys, k, ε, δ, η];
  return θ

in main
