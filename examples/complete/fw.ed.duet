
let main = ∀  m  : ℕ,
              n  : ℕ,
              ε  : ℝ⁺,
              δ  : ℝ⁺,
              k  : ℕ
              .
          pλ  xs : 𝕄 [L∞, U|m, n↦𝔻 ] ⋅ 1.0  ,
              ys : 𝕄 [L∞, U|m, 1.0↦𝔻 ] ⋅ 1.0  ,
              ε  : ℝ⁺[ε] ⋅ 1.0 ,
              δ  : ℝ⁺[δ] ⋅ 1.0 ,
              k  : ℕ[k] ⋅ 1.0,
              m  : ℕ[m] ⋅ 1.0,
              n  : ℕ[n] ⋅ 1.0
              ⇒
  let d = mcols @ m @ n @ 𝔻 xs in
  let m₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] d  (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
  let indexes = mcreate @ ℕ[1.0] @ ℕ[n] @
  𝕀[n] ø ⊠ ø ℝ
  ℕ[1] d (sλ <i> i : 𝕀[1.0] , <j> j : 𝕀[n] ⇒
            ⟨mod₄ @ n j (dyn₁ @ n d) <>,<> sign (real₁ (minus₁ (dyn₃ @ n j) (dyn₁ @ n d)))⟩) in

  loop @ ε @ ℝ⁺[0.0] @ δ @ k @ n @ <xs,ys>
    (pλ <xs,ys> t : ℕ ⋅ 1.0,
        <xs,ys> θ : 𝕄 [L∞, U|1.0, n↦𝔻 ] ⋅ 1.0 ⇒
      let μ = div₅ @ ℝ⁺[1.0] ℝ⁺[1.0] (plus₂ (real₁ t) 2.0) in
      let s = div₄ @ ℝ⁺[1.0] @ m ℝ⁺[1.0] (real₂ @ m (mrows @ m @ n @ 𝔻 xs)) in
      p ← exponentialₚ @ ℕ[1.0] @ n
        @ 𝕀[n] ø ⊠ ø ℝ
        @ ℝ⁺[1.0] @ ε @ δ @ <xs,ys> -- s ε
          (pλ <x,xs,ys> x : 𝕀[n] ø ⊠ ø ℝ ⋅ 1.0 ⇒
            let c = fst x in
            let s = snd x in
            g ← mgauss @ ε @ δ @ ℕ[1.0] @ n ε δ
                    (mLipGrad @ m @ n θ (mclip @ m @ n @ 𝔻 xs) ys);
            return mindex @ ℕ[1.0] @ n @ ℝ g (idx @ ℕ[0.0] ℕ[0]) c ) indexes ;

      let g₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] d  (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
      let zz = mindex₁ @ ℕ[1.0] @ n
                @ 𝕀[n] ø ⊠ ø ℝ
                indexes (idx @ ℕ[0.0] ℕ[0]) p in
      let s = snd zz in
      let i = fst zz in
      let gₚ = mupdate₁ @ ℕ[1.0] @ n @ ℝ g₀ (idx @ ℕ[0.0] ℕ[0]) i (times₂ s (real₁ 100)) in
      let θ' = mmap @ ℕ[1.0] @ n @ 𝔻 @ 𝔻 @ <> @ <> @ <>
                  θ (sλ <> x : 𝔻 ⇒ times₃ (disc @ ℝ (minus₂ 1.0 μ)) x ) in
      let θ'' = mconv @ ℕ[1.0] @ n θ' in
      let gₚ' = mmap₁ @ ℕ[1.0] @ n @ ℝ @ ℝ @ <> @ <> @ <> gₚ (sλ <> x : ℝ ⇒ times₂ μ  (times₂ 100.0 x) ) in
      return mmap2₁ @ ℕ[1.0] @ n @ ℝ @ ℝ @ <> @ <> @ <> θ'' gₚ' (sλ <> x : ℝ, <> y : ℝ ⇒ plus₂ x y )
    )
    m₀
    δ
in main
