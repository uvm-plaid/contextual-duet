-- gradient descent
-- per-iteration bound

-- gradient descent
let main =  ∀ m  : ℕ,
              n  : ℕ,
              ρ  : ℝ⁺,
              k  : ℕ
              .
           pλ xs : 𝕄 [L∞, U|m, n↦𝔻 ] ⋅ 1.0 ,
              ys : 𝕄 [L∞, U|m, 1.0↦𝔻 ] ⋅ 1.0,
              ρ  : ℝ⁺[ρ] ⋅ 1.0,
              k  : ℕ[k] ⋅ 1.0,
              η  : ℝ ⋅ 1.0,
              m  : ℕ[m] ⋅ 1.0,
              n  : ℕ[n] ⋅ 1.0
              ⇒
  let colnum = (mcols @ m @ n @ 𝔻 xs) in
  let m₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] colnum (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
  aloop₂ @ ρ @ k @ n @ <xs,ys>
    (pλ <xs,ys> θ : 𝕄 [L∞, U|1.0, n↦𝔻 ] ⋅ 1.0 ⇒
      g ← mgauss₂ @ ρ @ ℕ[1.0] @ n ρ
            (mLipGrad @ m @ n θ (mclip @ m @ n @ 𝔻 xs) ys) ;
      return (matsub @ ℕ[1.0] @ n θ g))
    m₀
in main
