let iter =  ∀ n  : ℕ,
              ε  : ℝ⁺,
              δ  : ℝ⁺,
              b  : ℕ
              .
            sλ  b  : ℕ[b],
              ε  : ℝ⁺[ε],
              δ  : ℝ⁺[δ],
              η  : ℝ
              ⇒
  pλ
    <xs> xs : 𝕄 [L∞, L2|b, n↦𝔻 ] ⋅ 1.0,
    <xs,ys> ys : 𝕄 [L∞, U|b, 1.0↦𝔻 ] ⋅ 1.0,
     <xs,ys> θ  : 𝕄 [L∞, U|1.0, n↦𝔻 ] ⋅ 1.0
     ⇒
  let s = div₄ @ ℝ⁺[1.0] @ ℝ⁺[b] ℝ⁺[1.0] (real₂ @ b b) in
  g ← mgauss @ ε @ δ @ ℕ[1.0] @ n ε δ
        (mLipGrad @ b @ n θ xs ys) ;
  return (matsub @ ℕ[1.0] @ n θ g)
in

let main =  ∀ m  : ℕ,
              n  : ℕ,
              ε  : ℝ⁺,
              k  : ℕ,
              δ  : ℝ⁺,
              b  : ℕ
              .
          pλ  xs : 𝕄 [L∞, U|m, n↦𝔻 ] ⋅ 1.0 ,
              ys : 𝕄 [L∞, U|m, 1.0↦𝔻 ] ⋅ 1.0 ,
              ε  : ℝ⁺[ε] ⋅ 1.0,
              k  : ℕ[k] ⋅ 1.0,
              δ  : ℝ⁺[δ] ⋅ 1.0,
              η  : ℝ ⋅ 1.0,
              b  : ℕ[b] ⋅ 1.0,
              m  : ℕ[m] ⋅ 1.0,
              n  : ℕ[n] ⋅ 1.0
              ⇒
  let colnum = (mcols @ m @ n @ 𝔻 xs) in
  let m₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] colnum (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
  let s = div₄ @ ℝ⁺[k] @ ℝ⁺[b] (real₂ @ ℕ[k] k) (real₂ @ ℕ[b] b) in
  pfld-rows @ ε @ δ @ m @ n @ b @ 𝔻 m₀ xs ys (iter @ n @ ε @ δ @ b b ε δ η) b
in main
