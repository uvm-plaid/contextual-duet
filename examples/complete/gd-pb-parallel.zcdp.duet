-- gradient descent
-- per-iteration bound
-- minibatching via parallel composition
let epoch = ∀  n  : ℕ,
               ρ  : ℝ⁺,
               b  : ℕ
               .
            sλ b  : ℕ[b],
               ρ  : ℝ⁺[ρ],
               η  : ℝ
               ⇒
  pλ
     <xs> xs : 𝕄 [L∞, L2|b, n↦𝔻 ] ⋅ 1.0 ,
     <xs,ys> ys : 𝕄 [L∞, U|b, 1.0↦𝔻 ] ⋅ 1.0 ,
     <xs,ys> θ  : 𝕄 [L∞, U|1.0, n↦𝔻 ] ⋅ 1.0
     ⇒
  -- let s = ℝ⁺[1.0] / real b in
  g ← mgauss₂ @ ρ @ ℕ[1.0] @ n ρ
        (mLipGrad @ b @ n θ xs ys) ;
  return (matsub @ ℕ[1.0] @ n θ g)
in

let main = ∀  m  : ℕ,
              n  : ℕ,
              ρ  : ℝ⁺,
              k  : ℕ,
              b  : ℕ
              .
          pλ  xs : 𝕄 [L∞, U|m, n↦𝔻 ] ⋅ 1.0 ,
              ys : 𝕄 [L∞, U|m, 1.0↦𝔻 ] ⋅ 1.0 ,
              ρ  : ℝ⁺[ρ] ⋅ 1.0 ,
              η  : ℝ ⋅ 1.0 ,
              k  : ℕ[k] ⋅ 1.0 ,
              b  : ℕ[b] ⋅ 1.0
              ⇒
  let colnum = (mcols @ m @ n @ 𝔻 xs) in
  let m₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] colnum (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
  aloop₂ @ ρ @ k @ m @ n @ <xs,ys>
    (pλ <xs,ys> θ : 𝕄 [L∞, U|1.0, n↦𝔻 ] ⋅ 1.0 ⇒
      pfld-rows₁ @ ρ @ m @ n @ b @ 𝔻 b (epoch @ n @ ρ @ b b ρ η) θ (mclip @ m @ n @ 𝔻 xs) ys
      ) m₀
in main
