-- differentially private adaptive learning
let main =  ∀ m  : ℕ,
              n  : ℕ,
              ε  : ℝ⁺,
              t  : ℕ,
              δ  : ℝ⁺,
              δ′ : ℝ⁺
              .
           pλ xs : 𝕄 [L∞, U|m, n↦𝔻 ] ⋅ 1.0 ,
              ys : 𝕄 [L∞, U|m, 1.0↦𝔻 ] ⋅ 1.0,
              ε  : ℝ⁺[ε] ⋅ 1.0,
              t  : ℕ[t] ⋅ 1.0,
              δ  : ℝ⁺[δ] ⋅ 1.0,
              δ′ : ℝ⁺[δ′] ⋅ 1.0,
              η  : ℝ ⋅ 1.0,
              m  : ℕ[m] ⋅ 1.0,
              n  : ℕ[n] ⋅ 1.0,
              γ  : ℝ ⋅ 1.0
              ⇒
  let colnum = (mcols @ m @ n @ 𝔻 xs) in
  let m₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] colnum (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
  let C⁰ = 100.0 in
  aloop @ ε @ δ @ δ′ @ t @ n @ <xs,ys>
    (pλ <xs,ys> θᵗ : 𝕄 [L∞, U|1.0, n↦𝔻 ] ⋅ 1.0, <xs,ys> Cᵗ : ℝ ⋅ 1.0 ⇒
      gᵖ ← mgaussᵈ @ ε @ δ @ m @ n @ <xs,ys> ε δ
            (mclipᵈ @ m @ n @ ℝ
            (matsub @ ℕ[1.0] @ n θᵗ
            (mLipGrad₁ @ m @ n θᵗ xs ys)) Cᵗ);
      Cᵗ′ ← clipUpdate @ ε @ δ @ m @ n gᵖ θᵗ xs Cᵗ γ;
      return ⟨gᵖ <> , <> Cᵗ′⟩)
    m₀
    C⁰
    δ′
in main
