-- adaptive learning
let main =  ∀ m  : ℕ,
              n  : ℕ,
              ε  : ℝ⁺,
              t  : ℕ,
              δ  : ℝ⁺,
              δ′ : ℝ⁺
              .
           pλ xs : 𝕄 [L∞, U|m, n↦𝔻 ] ⋅ 1.0 ,
              ys : 𝕄 [L∞, U|m, 1.0↦𝔻 ] ⋅ 1.0,
              ε  : ℝ⁺[ε] ⋅ 1.0,
              t  : ℕ[t] ⋅ 1.0,
              δ  : ℝ⁺[δ] ⋅ 1.0,
              δ′ : ℝ⁺[δ′] ⋅ 1.0,
              η  : ℝ ⋅ 1.0,
              m  : ℕ[m] ⋅ 1.0,
              n  : ℕ[n] ⋅ 1.0
              ⇒
  let colnum = (mcols @ m @ n @ 𝔻 xs) in
  let m₀ = mcreate @ ℕ[1.0] @ ℕ[n] @ ℝ ℕ[1] colnum (sλ i : 𝕀[1.0] , j : 𝕀[n] ⇒ 0.0) in
  let C⁰ = REAL_MAX in
  aloop @ ε @ δ @ δ′ @ t @ n @ <xs,ys>
    (pλ <xs,ys> θᵗCᵗ : 𝕄 [L∞, U|1.0, n↦𝔻 ] :⊗: ℝ ⋅ 1.0 ⇒
      let ⟨θᵗ, Cᵗ⟩ = θᵗCᵗ in
      g ← (mLipGrad @ m @ n θᵗ xs ys) ;
      𝚫 ← (matsub @ ℕ[1.0] @ n θᵗ g)
      gᶜ ← (mclip @ m @ n @ 𝔻 𝚫 Cᵗ) \\ needs to mention Cᵗ in type
      gᵖ ← mgauss @ ε @ δ @ ℕ[1.0] @ n ε δ Cᵗ gᶜ
      Cᵗ⁺¹ ← clipUpdate gᵖ θᵗ Cᵗ xs
      return ⟨𝚫,Cᵗ⁺¹⟩)
    m₀
    C⁰
    δ′
in main
